package main.java.model;

import main.java.common.CommonDefine;

import java.math.BigDecimal;

// default package
// Generated Feb 9, 2017 11:38:22 PM by Hibernate Tools 5.2.0.CR1

/**
 * UserStock generated by hbm2java
 */
public class UserStock implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private UserStockId id;
	private Stock stock;
	private User user;
	private BigDecimal valueThreshold; 			// Threshold when the price of a certain stock X reaches level Y
	private BigDecimal combinedValueThreshold;	// Threshold when the total price of a certain owned stock X reaches level Y
	private BigDecimal netProfitThreshold;		// Threshold when the total price of a certain owned stock X switch from having profit to loss or vice versa
	// Some wrapper variables for display purpose
	private BigDecimal currentValueThreshold;
	private BigDecimal currentCombinedValueThreshold;
	private BigDecimal currentNetProfitThreshold;
	
	private int stockType; // Indicate the relationship or status of user with current stock
	public UserStock() {
	}

	public UserStock(UserStockId id, Stock stock, User user, int stockType) {
		this.id = id;
		this.stock = stock;
		this.user = user;
		this.valueThreshold = new BigDecimal(-1); // Default value for value threshold when user doesn't set any value
		this.combinedValueThreshold = new BigDecimal(-1);
		this.netProfitThreshold = new BigDecimal(-1);
		this.setStockType(stockType);
	}

	public UserStock(UserStockId id, Stock stock, User user, BigDecimal valueThreshold, BigDecimal combinedValueThreshold, BigDecimal netProfitThreshold) {
		this.id = id;
		this.stock = stock;
		this.user = user;
		this.valueThreshold = valueThreshold;
		this.combinedValueThreshold = combinedValueThreshold;
		this.netProfitThreshold = netProfitThreshold;
	}

	public UserStockId getId() {
		return this.id;
	}

	public void setId(UserStockId id) {
		this.id = id;
	}

	public Stock getStock() {
		return this.stock;
	}

	public void setStock(Stock stock) {
		this.stock = stock;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	
	/**
	 * @return the valueThreshold
	 */
	public BigDecimal getValueThreshold() {
		return valueThreshold;
	}
	
	/**
	 * @param valueThreshold the valueThreshold to set
	 */
	public void setValueThreshold(BigDecimal valueThreshold) {
		this.valueThreshold = valueThreshold;
	}

	public BigDecimal getCombinedValueThreshold() {
		return this.combinedValueThreshold;
	}

	public void setCombinedValueThreshold(BigDecimal combinedValueThreshold) {
		this.combinedValueThreshold = combinedValueThreshold;
	}

	public BigDecimal getNetProfitThreshold() {
		return this.netProfitThreshold;
	}

	public void setNetProfitThreshold(BigDecimal netProfitThreshold) {
		this.netProfitThreshold = netProfitThreshold;
	}
	
	public String getValueThresholdString() {
		return valueThreshold.compareTo(new BigDecimal(-1)) == 0 ? "N/A" : String.valueOf(valueThreshold);
	}
	
	public String getCombinedValueThresholdString() {
		return combinedValueThreshold.compareTo(new BigDecimal(-1)) == 0 ? "N/A" : String.valueOf(combinedValueThreshold);
	}
	
	public String getNetProfitThresholdString() {
		return netProfitThreshold.compareTo(new BigDecimal(-1)) == 0 ? "N/A" : String.valueOf(netProfitThreshold);
	}

	/**
	 * @return the currentValueThreshold
	 */
	public BigDecimal getCurrentValueThreshold() {
		return currentValueThreshold;
	}

	/**
	 * @param currentValueThreshold the currentValueThreshold to set
	 */
	public void setCurrentValueThreshold(BigDecimal currentValueThreshold) {
		this.currentValueThreshold = currentValueThreshold;
	}

	/**
	 * @return the currentCombinedValueThreshold
	 */
	public BigDecimal getCurrentCombinedValueThreshold() {
		return currentCombinedValueThreshold;
	}

	/**
	 * @param currentCombinedValueThreshold the currentCombinedValueThreshold to set
	 */
	public void setCurrentCombinedValueThreshold(BigDecimal currentCombinedValueThreshold) {
		this.currentCombinedValueThreshold = currentCombinedValueThreshold;
	}

	/**
	 * @return the currentNetProfitThreshold
	 */
	public BigDecimal getCurrentNetProfitThreshold() {
		return currentNetProfitThreshold;
	}

	/**
	 * @param currentNetProfitThreshold the currentNetProfitThreshold to set
	 */
	public void setCurrentNetProfitThreshold(BigDecimal currentNetProfitThreshold) {
		this.currentNetProfitThreshold = currentNetProfitThreshold;
	}
	
	public String getCurrentValueThresholdString() {
		return currentValueThreshold == null ? "N/A" : String.valueOf(currentValueThreshold);
	}
	
	public String getCurrentCombinedValueThresholdString() {
		return currentCombinedValueThreshold == null ? "N/A" : String.valueOf(currentCombinedValueThreshold);
	}
	
	public String getCurrentNetProfitThresholdString() {
		return currentNetProfitThreshold == null ? "N/A" : String.valueOf(currentNetProfitThreshold);
	}

	/**
	 * @return the ownStock
	 */
	public int getStockType() {
		return stockType;
	}

	/**
	 * Flag to check if user owns stock or not.
	 * Only accept integer values in range [-2, 2]
	 * @param ownStock the ownStock to set
	 */
	public void setStockType(int stockType) {
		if (stockType < -2 && stockType > 2) {
			stockType = CommonDefine.INTERESTED_STOCK; // Set default is interested stock
		}
		this.stockType = stockType;
	}
}
